# WSF of the Maat Programming Language

* `{X}` stands for 0 or more of `X`.
* `[X]` implies `X` is optional.
* `|` stands for alternation.
* `(X)` for grouping, `X` is considered a single unit.

```
MaatCode = Stats .

Stats = { NonBlockStat end { end } | BlockStat } [ NonBlockStat ] .

NonBlockStat =   unimpl
               | Package
               | Use
               | Load
               | VarDef
               | Exp
               | StatMod
               | LoopCtrl
               | DeferExpList
               | OnceExpList
               | Return
               | Exit .

BlockStat =   PackageBlock
            | Label
            | Loop
            | Flow
            | Fn
            | Class
            | Role
            | Try
            | DeferBlock
            | OnceBlock
            | Phasers
            | Block .

Block = "{" Stats "}" .

Package      = "package" namespace .
PackageBlock = Package Block .

Phasers = ( "BEGIN" | "END" ) Block .

Label = name ":" .

Use = "use" namespace [ "(" [ name { "," name } ] ")" ] .

Load = "load" str_lit .

ExpList = Exp { Commas Exp } { "," } .
Commas  = "," { "," } .

VarDef = ( [ "const" ] ( "let" | "state" ) Names | [ export ] [ "const" ] "our" Names | "const" Names | "temp" AnyNames ) [ "=" Exp ] .

Names = name [ im ] | "(" NameList ")" .

NameList = { Name_ } [ "*" ] name [ im ] { _Name } { "," } .

Name_ =        name [ im ] Commas .
_Name = Commas name [ im ] .

AnyNames = "(" AnyNameList ")" | any_name [ im ] .

AnyNameList = { AnyName_ } [ "*" ] any_name [ im ] { _AnyName } { "," } .

AnyName_ =        any_name [ im ] Commas .
_AnyName = Commas any_name [ im ] .

Flow =   "when"   Cond              Block
       | "unless" Cond [ TopicVar ] Block { ElseIF } [ Else ]
       | "if"     Cond [ TopicVar ] Block { ElseIF } [ Else ]
       | "with"   Cond [ TopicVar ] Block { OrWith } [ Else ] .

ElseIf = "elsif"  Cond [ TopicVar ] Block .
OrWith = "orwith" Cond [ TopicVar ] Block .
Else   = "else"                     Block .

Cond     = ExpList .
TopicVar = "->" name .

StatMod = ExpList ( cond_keyword | loop_keyword ) Cond .

OnceBlock   = "once" Block .
OnceExpList = "once" ExpList .

DeferBlock   = "defer" Block .
DeferExpList = "defer" ExpList .

Return = "return" ExpList .
Exit   = "exit"   Exp .

Loop =   ForLoop
       | "loop"  [ LoopCondStats ] Block
       | "while"   Cond            Block
       | "until"   Cond            Block
       | "given"   Cond            Block .

ForLoop = "for" ExpList [ TopicVars ] Block .

TopicVars  = "->" name [ DefaultVal ] { "," name [ DefaultVal ] } .
DefaultVal = ( "=" | "\\=" ) Exp .

LoopCondStats = "(" [ ExpList ] ";" [ ExpList ] ";" [ ExpList ] ")" .

LoopCtrl = ( "break" | "next" | "redo" | "goto" ) [ name | loop_id ] .

Try = "try" Block { "catch" Exp Block } [ "finally" Block ] .

Fn = [ "const" ]
     [  Scope  ]
     [ "mul"   ] "fn" name [ "(" [ FnArgs ] ")" ] [ FnTrait ] FnBody .

FnBody  = Block .
FnTrait = gen save | save gen .
FnArgs  =   PosParam { "," PosParam } [ "," AccParam ] [ "," NamedParam ]
          | AccParam "," NamedParam
          | AccParam
          | NamedParam .

PosParam   =         name [ DefaultVal ] .
AccParam   =     "*" name [ DefaultVal ] .
NamedParam = "*" "*" name [ DefaultVal ] .

Class = [ "const" ] [ Scope ] "class" name { ( is | does ) Exp } [ main ] ClassBody .

ClassBody = "{" [ Fields | Fields end { end } Meths ] "}" .

Fields = { ClsNonBlockStat end { end } | BlockStat    } [ ClsNonBlockStat ] .
Meths  = { NonBlockStat    end { end } | ClsBlockStat } [ NonBlockStat    ] .

ClsBlockStat    = Meth  | BlockStat .
ClsNonBlockStat = Field | NonBlockStat .

Field      = "field" name [ FieldTrait ] [ DefaultVal ] .
FieldTrait = built | oi | rw | ro .

Meth = [ "mul" ] "meth" MethName [ "(" [ FnArgs ] ")" ] [ MethTrait ] MethBody .

MethBody  = FnBody .
MethTrait = oi save | save oi .
MethName  = name | op_type ":" "<" op_sym ">" .

Role     = [ "const" ] [ Scope ] "role" name { does Exp } [ main ] RoleBody .
RoleBody = ClassBody .

Exp =   nil_lit
      | bool_lit
      | num_lit
      | str_lit
      | VarDef
      | Vars
      | VarAssign
      | AnonyFn
      | Array
      | Map
      | PrefixExp
      | PostfixExp
      | Exp [ "!" ] infix_op Exp
      | Exp postfix_op
      | prefix_op Exp
      | StatExp .

PrefixExp = GroupExp | FnCall .

GroupExp = "(" ExpList ")" .

FnCall   = Var [ "(" [ CallArgs ] ")" | CallArgs ] .
CallArgs = PosArgs [ "," NamedArgs ] .

PosArgs = Exp { "," Exp } .

NamedArgs = NamedArg { "," NamedArg } .
NamedArg  = name "=>" Exp .

PostfixExp =   ReSmartMatch
             | ReMatch
             | ReSub
             | ReTr
             | OpReMatch
             | OpReSub
             | OpReTr
             | NamedUnaryExp
             | NamedListExp
             | Ternary .

Ternary   = Exp OpTernary .
OpTernary = "?" Exp ":" Exp .

NamedUnaryExp = unary_op_name Exp .
NamedListExp  = list_op_name  ExpList .

ReSmartMatch = Exp   "~~"          ( OpReMatch | Exp ) .
ReMatch      = Exp ( "=~" | "!~" ) ( OpReMatch | Exp ) .
ReSub        = Exp ( "=~" | "!~" )   OpReSub .
ReTr         = Exp ( "=~" | "!~" )   OpReTr .

OpReMatch = ( "m"  delim__r_q__delim | sl__r_q__sl ) m_re_mod .
OpReSub   =   "s"  OpReSubArg                        s_re_mod .
OpReTr    =   "tr" OpReTrArg                         t_re_mod .

OpReTrArg  = ReSubArg .
OpReSubArg =   r_q__single_char_delim
             | d_q__pair_delim    delim__r_q__delim
             | delim__r_q__delim  d_q__pair_delim .

Var         = any_name | fq_name_main | AccessField | ArrayElem | MapEntry .
AccessField = Exp "." name .
ArrayElem   = Exp "[" ExpList "]" .
MapEntry    = Exp ( o_lab uni_e_rab { uni_e_rab } c_rab | "{" ExpList "}" ) .

VarAssign = Vars "=" Exp .
Vars      = Var | "(" VarList ")" .

VarList = { Var_ } [ "*" ] Var { _Var } { "," } .

Var_ =        Var Commas .
_Var = Commas Var .

AnonyFn = [ "fn" ] "{" [ "|" FnArgs "|" ] [ Stats ] "}" .

Array = ArrayDefault | ArrayQuoted .

ArrayDefault = "[" [ ExpList ] "]" .
ArrayQuoted  = "@a" ArrayPairTokensPair | [ "@a" ] ArrayQuotedWithOptA .

ArrayQuotedWithOptA =   o_lab   { uni_e_rab   } c_rab
                      | o_labq  { uni_e_rabq  } c_rabq
                      | o_ldabq { uni_e_rdabq } c_rdabq .

ArrayPairTokensPair =   o_cb { uni_e_cb } c_cb
                      | o_pr { uni_e_pr } c_pr
                      | o_sb { uni_e_sb } c_sb
                      | s_em { uni_e_em } s_em
                      | s_bq { uni_e_bq } s_bq
                      | s_vb { uni_e_vb } s_vb
                      | s_dq { uni_e_dq } s_dq
                      | s_sq { uni_e_sq } s_sq
                      | s_sl { uni_e_sl } s_sl
                      | s_cm { uni_e_cm } s_cm .

Map = MapDefault | MapQuoted .

MapDefault = "{" [ KeyValue { Commas KeyValue } { "," } ] "}" .
KeyValue   = ( str_lit | uni___space__quotes | ":" Exp ) "=>" Exp .

MapQuoted         = "@m" MapPairTokensPair .
MapPairTokensPair =   o_cb    { uni_e_cb    uni_e_cb    } c_cb
                    | o_pr    { uni_e_pr    uni_e_pr    } c_pr
                    | o_sb    { uni_e_sb    uni_e_sb    } c_sb
                    | o_lab   { uni_e_rab   uni_e_rab   } c_rab
                    | o_labq  { uni_e_rabq  uni_e_rabq  } c_rabq
                    | o_ldabq { uni_e_rdabq uni_e_rdabq } c_rdabq
                    | s_em    { uni_e_em    uni_e_em    } s_em
                    | s_bq    { uni_e_bq    uni_e_bq    } s_bq
                    | s_vb    { uni_e_vb    uni_e_vb    } s_vb
                    | s_dq    { uni_e_dq    uni_e_dq    } s_dq
                    | s_sq    { uni_e_sq    uni_e_sq    } s_sq
                    | s_sl    { uni_e_sl    uni_e_sl    } s_sl
                    | s_cm    { uni_e_cm    uni_e_cm    } s_cm .

StatExp = DoStatExp | MaStatExp .

DoStatExp = "do"  ( Loop    | Flow   | Block ) .
MaStatExp = "maa" ( ForLoop | FnCall ) .

/** Below is the WSN of lexical tokens. **/

end = ";" .

im   = ":im"   .
main = ":main" .

save = ":save" .
gen  = ":gen"  .

ro    = ":ro"    .   is   = ":is"   .
rw    = ":rw"    .   does = ":does" .
built = ":built" .   oi   = ":oi"   .

unimpl = "…" | "..." .

cond_keyword = "if"  | "unless" | "when"  | "with"  .
loop_keyword = "for" | "until"  | "while" | "given" .

op_type = ( "infix" | "postfix" | "prefix" ) ":" .
op_sym  = /* UTF-8-encoded string except Maat keywords, ",", "(", and ")". */ .

special_name = spec_lex_scoped | spec_main_package .

spec_lex_scoped   = dec_int | "N"  | "*" | "." .
spec_main_package =   "V"   | "O"  | "," | "/"
                    | "|"   | """" | "@" | "0"
                    | "("   | "<"  | "F" | "*"
                    | "."   | "!"  | "N" | "SIG" .

non_zero_digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
ascii_digit    = "0" | non_zero_digit .

ascii_alpha =   "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i"
              | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r"
              | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A"
              | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J"
              | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S"
              | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" .

export = "export" [ "?" ] .

name = ( "_" | ascii_alpha ) { "_" | ascii_digit | ascii_alpha } .

ss_name      = "::" name .
name_ss      = name "::" .
name_ss_name = name ss_name { ss_name } .
namespace    = name_ss | name_ss_name .

fq_name      = name_ss_name .
fq_name_main = name_ss ":" | name { ss_name } ":::" name .

any_name = name | fq_name | "#" special_name .

postfix_op =   "++" | "--" | "*" | "⁰" | "¹" | "²" | "³"
             | "⁴"  | "⁵"  | "⁶" | "⁷" | "⁸" | "⁹" .

prefix_op =   "!" | "++" | "--" | "-" | "+"  | "~" | "^"
            | "√" | "Σ"  | "Π"  | ":" | "<-" .

infix_op =   "="   | "."   | ".^"  | ","  | "==" | "⩵"  | "==="
           | "⩶"   | "!="  | "≠"   | ">"  | ">=" | "≥"  | "<"
           | "<="  | "≤"   | "+"   | "-"  | "/"  | "÷"  | "*"
           | "%"   | "+="  | "/="  | "÷=" | "-=" | "\\" | "\\="
           | "*="  | "%="  | "<<"  | ">>" | "^"  | "&"  | "|"
           | "<<=" | ">>=" | "^="  | "&=" | "|=" | "&&" | "||"
           | "&&=" | "||=" | "∉"   | "∈"  | "∋"  | "∌"  | "⊂"
           | "⊄"   | "⊆"   | "⊈"   | "⊃"  | "⊅"  | "⊇"  | "⊉"
           | "≡"   | "≢"   | "⊖"   | "∩"  | "⊍"  | "∪"  | "⊎"
           | "⊖"   | "∖"   | "<=>" | "∘"  | "<-" | "~~" | ".." .

unary_op_name =   "sleep" | "defined" | "rand" | "len" | "clone"
                | "eval"  | "pos" .

list_op_name  =   "say" | "print" | "printf" | "sprintf" | "grep"
                | "map" | "lmap"  | "join"   | "run"     | "warn"
                | "die" .

re_mod   =      "i" | "m" | "s" | "a" | "n" | "x" | "p" | "l" .
m_re_mod =   re_mod | "g" | "c" .
s_re_mod = m_re_mod | "e" .
t_re_mod =      "c" | "d" | "s" .

nil_lit  = "nil" .
bool_lit = "true" | "false" .

dec_digit = "0" | non_zero_digit .
bin_digit = "0" | "1" .
oct_digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" .

hex_digit =   dec_digit | "A" | "B" | "C" | "D" | "E" | "F"
            |   "a"     | "b" | "c" | "d" | "e" | "f" .

num_lit = int_lit | float_lit .

int_lit = bin_int | oct_int | dec_int | hex_int .

dec_int = "0" | non_zero_digit [ [ "_" ] dec_digits ] .
bin_int = "0" ( "b" | "B" ) [ "_" ] bin_digit { [ "_" ] bin_digit } .
oct_int = "0" [ "o" | "O" ] [ "_" ] oct_digit { [ "_" ] oct_digit } .
hex_int = "0" ( "x" | "X" ) [ "_" ] hex_digits .

dec_digits = dec_digit { [ "_" ] dec_digit } .
hex_digits = hex_digit { [ "_" ] hex_digit } .

float_lit = hex_float | dec_float .

dec_float =   dec_int [ "." [ dec_digits ] ]   dec_expo
            | dec_int                          dec_expo
            |           "."   dec_digits     [ dec_expo ] .
dec_expo  = ( "e" | "E" ) [ "-" | "+" ] dec_digits .

hex_float    = "0" ( "x" | "X" ) hex_mantissa ( "p" | "P" ) [ "-" | "+" ] dec_digits .
hex_mantissa =   [ "_" ] hex_digits "." [ hex_digits ]
               | [ "_" ] hex_digits
               |                    "."   hex_digits .

o_cb    = "{" .   c_cb    = "}" .   e_cb    = "\" "}" .
o_pr    = "(" .   c_pr    = ")" .   e_pr    = "\" ")" .
o_sb    = "[" .   c_sb    = "]" .   e_sb    = "\" "]" .
o_lab   = "<" .   c_rab   = ">" .   e_rab   = "\" ">" .
o_ldabq = "«" .   c_rdabq = "»" .   e_rdabq = "\" "»" .
o_labq  = "‹" .   c_rabq  = "›" .   e_rabq  = "\" "›" .

s_em = "!"  .   e_em = "\" "!"  .
s_bq = "`"  .   e_bq = "\" "`"  .
s_vb = "|"  .   e_vb = "\" "|"  .
s_dq = """" .   e_bq = "\" """" .
s_sq = "'"  .   e_sq = "\" "'"  .
s_sl = "/"  .   e_sl = "\" "/"  .
s_cm = ","  .   e_cm = "\" ","  .

str_lit = str_default | str_q_with_delim | here_doc .

str_default = single_q | double_q | back_q .

single_q = s_sq { val_single_q } s_sq .
double_q = s_dq { val_double_q } s_dq .
back_q   = s_bq { val_double_q } s_bq .

val_double_q = vdq .
val_single_q = vsq .

vsq = esc_sq_char | byte_seq .
vdq = interpolate | esc_char | ascii_codepoint | uni_codepoint | byte_seq .

interpolate = "#" ( "{" special_name "}" | special_name ) | "{" Exp "}" .

esc_sq_char = "\" "'" .
esc_char    = "\" ( "{" | "#" | "a" | "b" | "f" | "n" | "r" | "t" | "v" | "\" | """" ) .

ascii_codepoint = "\" "x" hex_digit _hex_digit .
_hex_digit      = [ "_" ] hex_digit .

uni_codepoint = uni_u_val | uni_n_val .

uni_u_val = "\" "u"     ( hex_digit _hex_digit | "{"      codepoint "}" ) .
uni_n_val = "\" "N" "{" ( codepoint_name       |     "U+" codepoint     ) "}" .

codepoint_name = normative_name | name_alias .
normative_name = /* Normative name of a codepoint based on the UCD. */ .
name_alias     = /* Name alias of a codepoint based on the UCD. */ .

codepoint =   hex_digit      _hex_digit   [ _hex_digit ] [ _hex_digit ]
            [ _hex_digit ] [ _hex_digit ] [ _hex_digit ] [ _hex_digit ] .

byte_seq = uni_codepoint_utf8_enc | ill_formed_utf8_byte_seq .

uni_codepoint_utf8_enc   = /* A well-formed UTF-8 byte seq that represents a Unicode codepoint. */ .
ill_formed_utf8_byte_seq = /* An ill-formed UTF-8 byte seq not matching any specific UTF-8 pattern. */ .

str_q_with_delim = single_q_p | double_q_p | back_q_p | re_q_p .

single_q_p = "@q" delim__s_q__delim .
double_q_p = "@Q" delim__d_q__delim .
back_q_p   = "@x" delim__b_q__delim .
re_q_p  = "@r" delim__r_q__delim [ re_mod ] .

delim__d_q__delim = _delim__d_q__delim | sq__d_q__sq .
sq__d_q__sq       = s_sq { vdq | e_sq } s_sq .

_delim__d_q__delim = d_q__single_char_delim | d_q__pair_delim .

d_q__single_char_delim =   s_em { vdq | e_em } s_em
                         | s_bq { vdq | e_bq } s_bq
                         | s_vb { vdq | e_vb } s_vb
                         | s_dq { vdq        } s_dq
                         | s_sl { vdq | e_sl } s_sl
                         | s_cm { vdq | e_cm } s_cm .

d_q__pair_delim =   o_cb    { vdq | e_cb    } c_cb
                  | o_pr    { vdq | e_pr    } c_pr
                  | o_sb    { vdq | e_sb    } c_sb
                  | o_lab   { vdq | e_rab   } c_rab
                  | o_labq  { vdq | e_labq  } c_rabq
                  | o_ldabq { vdq | e_rdabq } c_rdabq .

delim__b_q__delim = _delim__d_q__delim | sq__b_q__sq .
sq__b_q__sq       = sq__s_q__sq .
sq__s_q__sq       = s_sq { vsq } s_sq .

delim__r_q__delim = _delim__d_q__delim | sq__r_q__sq .
sq__r_q__sq       = sq__s_q__sq .
sl__r_q__sl       = s_sl { vdq | e_sl } s_sl .

sq__r_q__sq__r_q__sq = sq__s_q__sq { vsq } s_sq .

r_q__single_char_delim =   s_em { vdq | e_em } s_em { vdq | e_em } s_em
                         | s_bq { vdq | e_bq } s_bq { vdq | e_bq } s_bq
                         | s_vb { vdq | e_vb } s_vb { vdq | e_vb } s_vb
                         | s_dq { vdq | e_dq } s_dq { vdq | e_dq } s_dq
                         | s_sq { vsq        } s_sq { vsq        } s_sq
                         | s_sl { vdq | e_sl } s_sl { vdq | e_sl } s_sl
                         | s_cm { vdq | e_cm } s_cm { vdq | e_cm } s_cm .

delim__s_q__delim = s_q__single_char_delim | s_q__pair_delim .

s_q__single_char_delim =   s_em { vsq | e_em } s_em
                         | s_bq { vsq | e_bq } s_bq
                         | s_vb { vsq | e_vb } s_vb
                         | s_dq { vsq | e_dq } s_dq
                         | s_sq { vsq        } s_sq
                         | s_sl { vsq | e_sl } s_sl
                         | s_cm { vsq | e_cm } s_cm .

s_q__pair_delim =   o_cb    { vsq | e_cb    } c_cb
                  | o_pr    { vsq | e_pr    } c_pr
                  | o_sb    { vsq | e_sb    } c_sb
                  | o_lab   { vsq | e_rab   } c_rab
                  | o_labq  { vsq | e_rabq  } c_rabq .
                  | o_ldabq { vsq | e_rdabq } c_rdabq

here_doc = here_doc_default | here_doc_indent .

here_doc_default = hd_no_q | hd_single_q | hd_double_q | hd_back_q .

hd_no_q     = "<<"      tok      nl vsq nl tok .
hd_single_q = "<<" "'"  tok "'"  nl vsq nl tok .
hd_double_q = "<<" """" tok """" nl vdq nl tok .
hd_back_q   = "<<" "`"  tok "`"  nl vdq nl tok .

here_doc_indent = hd_no_q_i | hd_single_q_i | hd_double_q_i | hd_back_q_i

hd_no_q_i     = "<<~"      tok      nl vsq nl { space } tok .
hd_single_q_i = "<<~" "'"  tok "'"  nl vsq nl { space } tok .
hd_double_q_i = "<<~" """" tok """" nl vdq nl { space } tok .
hd_back_q_i   = "<<~" "`"  tok "`"  nl vdq nl { space } tok .

tok = name .
nl  = [ carriage_ret ] new_line .

carriage_ret = /* UTF-8-encoded unicode codepoint U+000D. */ .
new_line     = /* UTF-8-encoded unicode codepoint U+000A. */ .
space        = /* UTF-8-encoded unicode codepoint U+0020. */ .

uni_e_cb    = ( uni___space__cb    | e_cb    ) { uni___space__cb    | e_cb    } .
uni_e_pr    = ( uni___space__pr    | e_pr    ) { uni___space__pr    | e_pr    } .
uni_e_sb    = ( uni___space__sb    | e_sb    ) { uni___space__sb    | e_sb    } .
uni_e_rab   = ( uni___space__rab   | e_rab   ) { uni___space__rab   | e_rab   } .
uni_e_rabq  = ( uni___space__rabq  | e_rabq  ) { uni___space__rabq  | e_rapq  } .
uni_e_rdabq = ( uni___space__rdabq | e_rdabq ) { uni___space__rdabq | e_rdabq } .
uni_e_em    = ( uni___space__em    | e_em    ) { uni___space__em    | e_em    } .
uni_e_bq    = ( uni___space__bq    | e_bq    ) { uni___space__bq    | e_bq    } .
uni_e_vb    = ( uni___space__vb    | e_vb    ) { uni___space__vb    | e_vb    } .
uni_e_dq    = ( uni___space__dq    | e_dq    ) { uni___space__dq    | e_dq    } .
uni_e_sq    = ( uni___space__sq    | e_sq    ) { uni___space__sq    | e_sq    } .
uni_e_sl    = ( uni___space__sl    | e_sl    ) { uni___space__sl    | e_sl    } .
uni_e_cm    = ( uni___space__cm    | e_cm    ) { uni___space__cm    | e_cm    } .

uni___space         = /* UTF-8-encoded unicode codepoint except U+0020 */ .
uni___space__cb     = /* UTF-8-encoded unicode codepoint except U+0020 and U+007D */ .
uni___space__pr     = /* UTF-8-encoded unicode codepoint except U+0020 and U+0029 */ .
uni___space__sb     = /* UTF-8-encoded unicode codepoint except U+0020 and U+005D */ .
uni___space__rab    = /* UTF-8-encoded unicode codepoint except U+0020 and U+003E */ .
uni___space__rabq   = /* UTF-8-encoded unicode codepoint except U+0020 and U+203A */ .
uni___space__rdabq  = /* UTF-8-encoded unicode codepoint except U+0020 and U+00BB */ .
uni___space__em     = /* UTF-8-encoded unicode codepoint except U+0020 and U+0021 */ .
uni___space__bq     = /* UTF-8-encoded unicode codepoint except U+0020 and U+0060 */ .
uni___space__vb     = /* UTF-8-encoded unicode codepoint except U+0020 and U+007C */ .
uni___space__dq     = /* UTF-8-encoded unicode codepoint except U+0020 and U+0022 */ .
uni___space__sq     = /* UTF-8-encoded unicode codepoint except U+0020 and U+0027 */ .
uni___space__sl     = /* UTF-8-encoded unicode codepoint except U+0020 and U+002F */ .
uni___space__cm     = /* UTF-8-encoded unicode codepoint except U+0020 and U+002C */ .
uni___space__quotes = /* UTF-8-encoded unicode codepoint except U+0020, U+002C, ... and ... */ .


```

An expession is a special case of statement that returns a value.

say ((2,,,4) + 1) # outputs 5 it implies that an expression list is an expression and ',' is an infix operator.
say ((2,,) + 1)   # outputs 3, is ',' also a postfix operator?

# ambiguity
1. loop (); k; k { }
2. exp, exp, exp if exp, exp, exp ... === exp, exp, exp if (exp, exp, exp ...)
3. hex_float (_.)
4. code_interpolation
5. =~ is not an infix operator
6. special case of the smartmatch operator which is a postfix operator
7. issue with function and anonymous function calls (function do not have the .call method for the issues to be fixed).
8. commas and comments in quoted words have no special meanings
9. Point where stuffs are executed in list and others in scalar context
10. should the function defined like `fn <name>(*k) {` when called act as a list operator?
11. Any function call without the use of parentheses like act like a named list operator and
    thus the call is taken to be of highest precedence.
12. The accumulator operator (*var) is not a prefix operator

`PostfixExp` isn't solely dedicated to rees but it turns out that rees are
the only postfix expressions of this kind. Also, the presence of `ReMatch`,
`ReSub` and `ReTrans` as possible values to `PostfixExp` is due to the
fact that a re expression starting with its left operand implies the
operation is done on the default topic variable `_`, for instance an expression
starting with `/^Ku.p{2}[0o]/` is equivalent to `_ =~ /^Ku.p{2}[0o]/`.

The reason why the regex operator `=~` isn't a normal infix operator like its
brothers is due to the designed decisions of the compiler and also how exactly
regular expressions are used in Maat




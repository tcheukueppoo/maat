# WSF of the Maat Programming Language

* `{X}` stands for 0 or more of `X`.
* `[X]` implies `X` is optional.
* `|` stands for alternation.
* `(X)` for grouping, `X` is considered a single unit.

```
Block = "{" [ Stats ] "}" .

Stats = { NonBlockStat end { end } | BlockStat } [ NonBlockStat ] .

NonBlockStat =   unimpl
               | Package
               | Use
               | Load
               | VarDef
               | Exp
               | StatMod
               | LoopCtrl
               | LoopCtrlExp
               | DeferExp
               | Return .

BlockStat =   PackageBlock
            | Label
            | Loop
            | Flow
            | Fn
            | Class
            | Role
            | Try
            | LoopCtrlBlock
            | DeferBlock .

Package      = "package" namespace .
PackageBlock = Package Block .

Label = name ":" .

Use = "use" namespace [ "(" [ name { "," name } ] ")" ] .

Load = "load" string_lit .

Commas = "," { "," } .

ExpList = Exp { Commas Exp } { "," } .

VarDef = ( [ "const" ] ( [ scope ] | "state" ) Vars | "const" Vars | "temp" AnyVars ) [ EqExp ] .

EqExp = "=" Exp .

Vars    = "(" VarList { "," } ")" | var .
VarList = { Var_ } [ "*" ] var [ im ] { _Var } .
_Var    = Commas var [ im ] .
Var_    = var        [ im ] Commas .

AnyVars    = "(" AnyVarList { "," } ")" | any_var .
AnyVarList = { AnyVar_ } [ "*" ] any_var [ im ] { _AnyVar } .
_AnyVar    = Commas any_var [ im ] .
AnyVar_    = any_var        [ im ] Commas .

Flow =   "once"                    Block
       | "given" Cond [ TopicVar ] Block
       | "when"  Cond              Block
       | "if"    Cond [ TopicVar ] Block { elseif Cond [ TopicVar ] Block } [ else Block ]
       | "with"  Cond [ TopicVar ] Block { orwith Cond [ TopicVar ] Block } [ else Block ] .

TopicVar = "->" var .

Cond = ExpList .

StatMod = ( ExpList ( cond_keyword | loop_keyword ) Cond ) | "once" ExpList .

Return = return ExpList .

Loop =   ForLoop
       | "loop"  [ LoopCondStats ] Block
       | "while" Cond              Block
       | "until" Cond              Block .

ForLoop = "for" ExpList [ TopicVars ] Block .

LoopCondStats = "(" [ ExpList ] ";" [ ExpList ] ";" [ ExpList ] ")" .

LoopCtrl = ( "break" | "next" | "redo" | "goto" ) [ name | loop_id ] .

TopicVars = "->" var [ EqExp ] { "," var [ EqExp ] } .

DeferBlock = "defer" Block .
DeferExp   = "defer" Exp .

Try = "try" Block { "catch" Exp Block } [ "finally" Block ] .

Fn = [ "const" ] [ scope ] [ "mul" ] "fn" name [ "(" [ FnArgs ] ")" ] [ ":s" | ":g" ] FnBody .

FnArgs =   NormArg { "," NormArg } [ "," AccArg ] [ "," MapArg ]
         | AccArg "," MapArg
         | AccArg
         | MapArg .

NormArg = var [ ( "=" | "=//" ) Exp ] .
AccArg  = "*"     var .
HashArg = "*" "*" var .

FnBody = Block .

Class    = [ "const" ] [ scope ] "class" name [ ClassRel ] [ main ] ClassBody .
ClassRel = Is | Does | Is Does .

Is   = ":is("   [ IsArgs   ] ")" .
Does = ":does(" [ DoesArgs ] ")" .

DoesArgs = IsArgs .

IsArgs   = RelClass { "," RelClass } .
RelClass = any_name | fq_name_main | PrefixExp .

ClassBody = "{" ( FieldWithOthers | FieldWithOthers end { end } MethsWithOthers ) "}" .

FieldWithOthers   = { ClassNonBlockStat end { end } | BlockStat      } [ ClassNonBlockStat ] .
MethsWithOthers   = { NonBlockStat      end { end } | ClassBlockStat } [ NonBlockStat      ] .
ClassNonBlockStat = Field | NonBlockStat .
ClassBlockStat    = Meth  | BlockStat .

Field = "field" name [ ":rw" | ":ro" | ":built" ] [ EqExp ] .

Meth     = [ "mul" ] "meth" ( "<" custom_op ">" | name [ "(" [ FnArgs ] ")" ] ) [ ":io" ] MethBody .
MethBody = FnBody .

Role     = [ "const" ] [ scope ] "role" name [ Does ] [ main ] RoleBody .
RoleBody = ClassBody .

Exp =   nil
      | boolean
      | number
      | string_lit
      | regex_lit
      | PrefixExp
      | AnonyFn
      | Array
      | Map
      | VarDef
      | Exp infix_op Exp
      | Exp postfix_op
      | prefix_op Exp
      | StatExp

AnonyFn = [ "fn" ] "{" [ "|" FnArgs "|" ] [ Stats ] "}" .

Map        = DefaultMap | QuotedMap .
DefaultMap = "{" { Exp "=>" Exp Commas } "}" .
QuotedMap  = "@m" PairTokensPair .

PairWordsPair =   xxPair Words xxPair
                | xxPair Words xxPair
                | xxPair Words xxPair .

Token =  .

Array        = DefaultArray | QuotedArray .
DefaultArray = "[" [ ExpList ] "]" .
QoutedArray  = "@a" PairWordsPair .

StatExp = DoStatExp | MaStatExp .

DoStatExp = "do" ( Loop    | Flow   ) .
MaStatExp = "ma" ( ForLoop | FnCall ) .

PrefixExp =  .

/* Below are lexical tokens */

scope        = "let" | "our" .
loop_keyword = "for" | "until"  | "while" .
cond_keyword = "if"  | "unless" | "when" | "with" | "given" .

end = ";" .

infix_op = "," | ":" |

postfix_op = .

prefix_op = .

unimpl = "…" | "..." .

im = ":i" . main = ":m" .

nil = "nil" .

boolean = "true" | "false" .

bin_digit      = "0" | "1" .
non_zero_digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" .
oct_digit      = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" .
dec_digit      = "0" | non_zero_digit .
hex_digit      = dec_digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" .

num_lit = int_lit | float_lit .

int_lit = bin_int | oct_int | dec_int | hex_int .
bin_int = "0" ( "b" | "B" ) [ "_" ] bin_digit { [ "_" ] bin_digit } .
oct_int = "0" [ "o" | "O" ] [ "_" ] oct_digit { [ "_" ] oct_digit } .
dec_int = "0" | non_zero_digit [ [ "_" ] dec_digits ] .
hex_int = "0" ( "x" | "X" )      [ "_" ] hex_digits .

dec_digits = dec_digit { [ "_" ] dec_digit } .
hex_digits = hex_digit { [ "_" ] hex_digit } .

float_lit = hex_float | dec_float .

dec_float =   dec_int [ "." [ dec_digits ] ] dec_exp
            | dec_int                        dec_exp
            | "." dec_digits               [ dec_exp ] .

dec_exp = ( "e" | "E" ) [ "-" | "+" ] dec_digits .

hex_float    = "0" ( "x" | "X" ) hex_mantissa ( "p" | "P" ) [ "-" | "+" ] dec_digits .
hex_mantissa =   [ "_" ] hex_digits "." [ hex_digits ]
               | [ "_" ] hex_digits
               |   "."   hex_digits .

string_lit = str_default | str_with_pair | here_doc .

str_default = single_q | double_q | back_q .

single_q = "'"  val_single_q "'"  .
double_q = """" val_double_q """" .
back_q   = "`"  val_double_q "`"  .

val_double_q = unicode_val  | esc_char | .
val_single_q = unicode_char | esc_char_sq | new_line .

unicode_val = byte | unicode_codepoint | ascii_codepoint | esc_char .
esc_char = 

str_with_pair = "@" ( single_q_p | double_q_p | back_q_p | regex_q_p ) .
single_q_p    = "q" pair__s_q__pair .
double_q_p    = "Q" pair__d_q__pair .
back_q_p      = "x" pair__b_q__pair .
regex_q_p     = "r" pair__r_q__pair .

pair__s_q__pair =   o_cb   vsq_cb   c_cb   | o_pr   vsq_pr   c_pr   | o_sb vsq_sb c_sb | o_lab vsq_rab o_rab
                  | o_ldap vsq_rdap c_rdap | o_lapq vsq_lapq c_lapq | s_em vsq_em s_em | s_bt  vsq_bt  s_bt
                  | s_dl   vsq_dl   s_dl   | s_vb   vsq_vb   s_vb   | s_dq vsq_sq s_dq | s_sq  vsq     s_sq
                  | s_sl   vsq_sl   s_sl   | s_cm   vsq_cm   s_cm .

pair__d_q__pair =   o_cb   vdq_cb   c_cb   | o_pr   vdq_pr   c_pr   | o_sb vdq_sb c_sb | o_lab vdq_rab c_rab
                  | o_ldap vdq_rdap c_rdap | o_lapq vdq_lapq c_lapq | s_em vdq_em s_em | s_bt  vdq_bt  s_bt
                  | s_dl   vdq_dl   s_dl   | s_vb   vdq_vb   s_vb   | s_dq vdq    s_dq | s_sq  vdq_sq  s_sq
                  | s_sl   vdq_sl   s_sl   | s_cm   vdq_cm   s_cm .

pair__b_q__pair = pair__d_q__pair .

pair__r_q__pair = 

o_cb  = "{" . c_cb  = "}" . o_pr   = "(" . c_pr   = ")" . o_sb   = "[" . c_sb   = "]" .
o_lab = "<" . c_rab = ">" . o_ldaq = "«" . c_rdap = "»" . o_labq = "‹" . c_rabq = "›" .

e_cb = "\}" . e_pr = "\)" . e_sb = "\]" . e_rab = "\>" . c_rdap = "\»" . e_rabq = "\›" .

s_em = "!" . s_bt = "`" . s_dl = "$" . s_vb = "|" .
s_dq = '"' . s_sq = "'" . s_sl = "/" . s_cm = "," .

e_em = "\!"     . e_bt = "\`" . s_dl = "\$" . e_vb = "\|" .
e_bq = "\" """" . e_sq = "\'" . e_sl = "\/" . e_cm = "\," .

here_doc    = hd_no_q | hd_single_q | hd_double_q | hd_back_q .
hd_no_q     = "<<"      tok      nl vsq nl tok .
hd_single_q = "<<" "'"  tok "'"  nl vsq nl tok .
hd_double_q = "<<" """" tok """" nl vdq nl tok .
hd_back_q   = "<<" "`"  tok "`"  nl vsq nl tok .
tok         = name .

generic_nl = [ carriage_return ] new_line .


regex_lit         = regex_default | regex_q_with_pair .
regex_default     = "/" "/" { regex_val_mod } .
regex_q_with_pair = "@r"
regex_val_mod     = "m" | "i" | "s" | "a" | "n" |
regex_s_op_mod    = regex_value_mod | "g" | "e" |


special_char =   "V" | "O" | ","
               | "/" | "|" | """"
               | "$" | "0" | "("
               | "<" | "F" | "*"
               | "." | "!" | "$" .

name = 

var = name .

namespace = name { "::" name } .

fq_var      = namespace "::" name .
fq_var_main = [ namespace ] ":::" name .

special_var = "$" special_char .
any_var     = var | fq_var | special_var .
```

An expession is a special case of statement that returns a value.

say ((2,,,4) + 1) # outputs 5 it implies that an expression list is an expression and ',' is an infix operator.
say ((2,,) + 1)   # outputs 3, is ',' also a postfix operator?

# ambiguity
loop (); k; k { }
exp, exp, exp if exp, exp, exp ... === exp, exp, exp if (exp, exp, exp ...)
hex_float (_.)
